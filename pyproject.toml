[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "agent-foundry"
version = "0.1.0"
description = "A framework for building and deploying AI agents with a focus on modularity and extensibility."
authors = [
    { name = "Kwesi Apponsah", email = "kwesi.p.apponsah@pwc.com" },
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "apscheduler>=3.11.0",
    "azure-identity>=1.23.0",
    "certifi>=2025.1.31",
    "click>=8.1.8",
    "codename>=1.1",
    "fastapi>=0.115.12",
    "jinja2>=3.1.6",
    "langfuse>=2.60.5",
    "logfire>=3.16.0",
    "loguru>=0.7.3",
    "nest-asyncio>=1.6.0",
    "openai-agents[litellm]>=0.0.12",
    "pydantic>=2.11.3",
    "python-dotenv>=1.1.0",
    "pyyaml>=6.0.2",
    "redis>=6.2.0",
    "tavily-python>=0.7.2",
    "tenacity>=9.1.2",
    "textual>=3.2.0",
    "textual-dev>=1.7.0",
]

[project.scripts]
ferros = "ferros.cli:cli"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[dependency-groups]
dev = [
    "coverage>=7.8.0",
    "ipython>=9.1.0",
    "mlflow>=2.22.0",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "rich>=14.0.0",
    "ruff>=0.11.7",
]

[tool.ruff]
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade,
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["F401"]

[tool.mypy]
strict = false
warn_unused_ignores = false
disallow_any_generics = true
no_implicit_reexport = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
explicit_package_bases = true
disallow_untyped_decorators = false
ignore_missing_imports = true
namespace_packages = true
plugins = [
    "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true


# Configure external packages as having implicit Any types
[[tool.mypy.overrides]]
module = ["agents.*", "textual.*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["tests", "src"]
omit = [
    "tests/*",
    "src/__init__.py",
]

[tool.coverage.report]
show_missing = true
sort = "-Cover"
fail_under = 90
exclude_also = [
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
    "raise NotImplementedError",
    "logger.debug",
]

[tool.pytest.ini_options]
pythonpath = "src/"
addopts = [
    "--pdb",
    "--tb=short",
    "--disable-warnings",
    "--maxfail=1",
]

testpaths = [
    "tests",
]

filterwarnings = [
    "ignore:DeprecatedWarning:RuntimeWarning:UserWarning",
]

asyncio_default_fixture_loop_scope = "function"
