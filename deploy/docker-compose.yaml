services:
  agent-foundry-api:
    image: agent-foundry/amd64
    container_name: agent-foundry-api
    restart: always
    env_file: .env.agent
    environment:
      LOG_ROOT_DIR: /app/logs/agent-foundry-api
    volumes:
      - agent_foundry_api_logs:/app/logs/agent-foundry-api
    command: >
      ferros api --host=0.0.0.0 --port=5000
    ports:
      - 127.0.0.1:5000:5000
    depends_on:
      agent-foundry-registry:
        condition: service_healthy
      agent-foundry-worker:
        condition: service_healthy
      blackboard-mcp:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'curl -s http://localhost:5000/health | grep -q ''"status":"healthy"'' || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-foundry-worker:
    image: agent-foundry/amd64
    container_name: agent-foundry-worker
    restart: always
    env_file: .env.agent
    environment:
      LOG_ROOT_DIR: /app/logs/agent-foundry-worker
    volumes:
      - agent_foundry_worker_logs:/app/logs/agent-foundry-worker
    command: >
      ferros worker
    ports:
      - 127.0.0.1:5050:5050
    depends_on:
      agent-foundry-registry:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD", "sh", "-c", "curl -s http://localhost:5050/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-foundry-registry:
    image: redis:7
    container_name: agent-foundry-registry
    restart: always
    command: >
      --appendonly yes --appendfilename agent-registry.aof
    volumes:
      - agent_registry_data:/data
    ports:
      - 6381:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  blackboard-mcp:
    image: blackboard-mcp/amd64
    container_name: blackboard-mcp
    env_file: .env.blackboard
    environment:
      LOG_ROOT_DIR: /app/logs/blackboard-mcp
    volumes:
      - blackboard_mcp_logs:/app/logs/blackboard-mcp
    ports:
      - 127.0.0.1:8000:8000
    depends_on:
      blackboard-mem:
        condition: service_healthy
      blackboard-vol:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'curl -s http://localhost:8000/health | grep -q ''"status":"healthy"'' || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  blackboard-mem:
    image: redis/redis-stack:latest
    container_name: blackboard-mem
    ports:
      - 127.0.0.1:6380:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  blackboard-vol:
    image: minio/minio
    container_name: blackboard-vol
    restart: always
    entrypoint: sh
    command: -c 'mkdir -p /data/agent-foundry-datastore /data/blackboard-datastore && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniosecret} # CHANGEME
    ports:
      - 9092:9000
      - 127.0.0.1:9093:9001
    volumes:
      - blackboard_vol_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  langfuse-worker:
    image: langfuse/langfuse-worker:3
    container_name: langfuse-worker
    restart: always
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    ports:
      - 127.0.0.1:3030:3030
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/postgres
      SALT: ${SALT:-}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse} # CHANGEME
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_USE_AZURE_BLOB: ${LANGFUSE_USE_AZURE_BLOB:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH:-myredissecret} # CHANGEME
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}

  langfuse-web:
    image: langfuse/langfuse:3
    container_name: langfuse-web
    restart: always
    depends_on: *langfuse-depends-on
    ports:
      - 127.0.0.1:3000:3000
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: https://agent-foundry.canadacentral.cloudapp.azure.com:10443
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}
      VIRTUAL_HOST: ${DOMAIN:-}
      LETSENCRYPT_HOST: ${DOMAIN:-}
      LETSENCRYPT_EMAIL: ${EMAIL:-}

  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    restart: always
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse} # CHANGEME
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - 127.0.0.1:8123:8123
      - 127.0.0.1:9000:9000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    entrypoint: sh
    # create the 'langfuse' bucket before starting the service
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniosecret} # CHANGEME
    ports:
      - 9090:9000
      - 127.0.0.1:9091:9001
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  redis:
    image: redis:7
    container_name: redis
    restart: always
    # CHANGEME: row below to secure redis password
    command: >
      "--requirepass ${REDIS_AUTH:-myredissecret}"
    ports:
      - 127.0.0.1:6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # CHANGEME
      POSTGRES_DB: postgres
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

volumes:
  langfuse_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres/data
  langfuse_clickhouse_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/clickhouse/data
  langfuse_clickhouse_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/clickhouse/logs
  langfuse_minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data
  nginx_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx/certs
  nginx_vhost:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx/vhost
  nginx_html:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx/html
  agent_registry_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/agent-registry/data
  blackboard_vol_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/blackboard/data
  blackboard_mcp_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/blackboard/logs
  agent_foundry_worker_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/agent-foundry/worker/logs
  agent_foundry_api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/agent-foundry/api/logs
